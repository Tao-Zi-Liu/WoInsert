{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.5-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/validate-and-explain-data.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Data validation flow for the TaskMaster Pro application.\n *\n * - validateAndExplainData - A function that validates form data and provides explanations for any errors.\n * - ValidationInput - The input type for the validateAndExplainData function.\n * - ValidationOutput - The return type for the validateAndExplainData function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst ValidationInputSchema = z.object({\n  wo_woid: z.string().describe('Work Order ID'),\n  wo_wlid: z.string().describe('Work List ID'),\n  wo_xqsl: z.string().describe('Required Quantity'),\n  wo_jhkgrq: z.string().describe('Planned Start Date'),\n  wo_jhwgrq: z.string().describe('Planned Completion Date'),\n  wo_bmid: z.string().describe('Completion Department'),\n  all_woids: z.array(z.string()).describe('All WO_WOIDs in the current form'),\n});\n\nexport type ValidationInput = z.infer<typeof ValidationInputSchema>;\n\nconst ValidationOutputSchema = z.object({\n  isValid: z.boolean().describe('Whether the data is valid or not'),\n  explanation: z.string().describe('Explanation of validation results, including errors.'),\n});\n\nexport type ValidationOutput = z.infer<typeof ValidationOutputSchema>;\n\nexport async function validateAndExplainData(input: ValidationInput): Promise<ValidationOutput> {\n  return validateAndExplainDataFlow(input);\n}\n\nconst validateDataPrompt = ai.definePrompt({\n  name: 'validateDataPrompt',\n  input: {schema: ValidationInputSchema},\n  output: {schema: ValidationOutputSchema},\n  prompt: `You are a data validation expert for TaskMaster Pro, an application for managing production task orders.  Your job is to validate the incoming data from a form and explain any validation issues.\n\nHere's the data you need to validate:\n\nWO_WOID: {{{wo_woid}}}\nWO_WLID: {{{wo_wlid}}}\nWO_XQSL: {{{wo_xqsl}}}\nWO_JHKGRQ: {{{wo_jhkgrq}}}\nWO_JHWGRQ: {{{wo_jhwgrq}}}\nWO_BMID: {{{wo_bmid}}}\nAll WO_WOIDs in form: {{{all_woids}}}\n\nHere are the validation rules:\n\n1.  All fields (WO_WOID, WO_WLID, WO_XQSL, WO_JHKGRQ, WO_JHWGRQ, WO_BMID) are required.\n2.  WO_XQSL must be a number greater than 0.\n3.  WO_WOID must be unique within the current form (check against {{{all_woids}}}).\n4.  WO_WLID must exist in the Oracle ERP database (WLXX table, WLXX_WLID column).\n\nRespond with a JSON object (following the ValidationOutputSchema) indicating whether the data is valid and providing a detailed explanation of any validation errors. Make sure to set isValid to false if ANY of the above checks fail.\n\nWO_WLID existence in Oracle database cannot be validated by you directly; assume the tool will perform the check and indicate this in the explanation if you have marked the entire form as invalid due to other validation failures.\n`,\n});\n\nconst checkOracleWLID = ai.defineTool(\n  {\n    name: 'checkOracleWLID',\n    description: 'Checks if WO_WLID exists in the Oracle ERP database WLXX table.',\n    inputSchema: z.object({\n      wo_wlid: z.string().describe('The WO_WLID to check.'),\n    }),\n    outputSchema: z.object({\n      exists: z.boolean().describe('Whether WO_WLID exists in Oracle database.'),\n      error: z.string().optional().describe('Error message if validation failed.'),\n    }),\n  },\n  async input => {\n    try {\n      const response = await fetch(`${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/api/validate-wlid`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ woWlid: input.wo_wlid }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        return {\n          exists: false,\n          error: data.error || 'Database validation failed',\n        };\n      }\n\n      return {\n        exists: data.exists,\n      };\n    } catch (error: any) {\n      return {\n        exists: false,\n        error: error.message || 'Network error during validation',\n      };\n    }\n  }\n);\n\nconst validateAndExplainDataFlow = ai.defineFlow(\n  {\n    name: 'validateAndExplainDataFlow',\n    inputSchema: ValidationInputSchema,\n    outputSchema: ValidationOutputSchema,\n  },\n  async input => {\n    const {output} = await validateDataPrompt(input);\n\n    if (!output?.isValid) {\n      return output!;\n    }\n\n    const oracleCheck = await checkOracleWLID({\n      wo_wlid: input.wo_wlid,\n    });\n\n    if (oracleCheck.error) {\n      return {\n        isValid: false,\n        explanation: `Database validation error: ${oracleCheck.error}`,\n      };\n    }\n\n    if (!oracleCheck.exists) {\n      return {\n        isValid: false,\n        explanation: `WO_WLID '${input.wo_wlid}' does not exist in the ERP system database (WLXX table).`,\n      };\n    }\n\n    return {\n      isValid: true,\n      explanation: 'All validations passed.',\n    };\n  }\n);"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 389, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\"use server\";\n\nimport { type Task } from \"@/lib/definitions\";\nimport { validateAndExplainData, type ValidationInput } from \"@/ai/flows/validate-and-explain-data\";\nimport { formatInTimeZone } from 'date-fns-tz';\n\ntype SubmissionResult = {\n  success: boolean;\n  errors?: {\n    rowIndex: number;\n    message: string;\n    field?: keyof Task;\n  }[];\n};\n\n// Helper to check for duplicate WO_WOIDs in the current submission batch\nconst findDuplicates = (tasks: Task[]): string[] => {\n    const woids = tasks.map(t => t.WO_WOID);\n    return woids.filter((item, index) => woids.indexOf(item) !== index);\n}\n\nexport async function submitTasks(tasks: Task[]): Promise<SubmissionResult> {\n  const allWoIdsInForm = tasks.map(t => t.WO_WOID);\n  const duplicatesInForm = findDuplicates(tasks);\n  \n  const validationPromises = tasks.map(async (task, index) => {\n    // Frontend-like checks first for duplicates within the form\n    if (duplicatesInForm.includes(task.WO_WOID)) {\n      return { \n        index,\n        isValid: false,\n        explanation: `WO_WOID is duplicated in this submission.`,\n        field: 'WO_WOID' as keyof Task\n      };\n    }\n    \n    const validationInput: ValidationInput = {\n      wo_woid: task.WO_WOID,\n      wo_wlid: task.WO_WLID,\n      wo_xqsl: task.WO_XQSL,\n      wo_jhkgrq: task.WO_JHKGRQ,\n      wo_jhwgrq: task.WO_JHWGRQ,\n      wo_bmid: task.WO_BMID,\n      all_woids: allWoIdsInForm,\n    };\n\n    try {\n      const result = await validateAndExplainData(validationInput);\n      // The AI might return valid even if some fields are empty based on its prompt, so we add a check here.\n      const hasEmptyFields = Object.values(task).some(v => v === '');\n      if (hasEmptyFields) {\n          return { index, isValid: false, explanation: \"All fields are required.\" };\n      }\n      return { index, ...result, field: 'WO_WLID' as keyof Task };\n    } catch(e: any) {\n      console.error(\"AI Validation Error:\", e);\n      return { index, isValid: false, explanation: e.message || \"An error occurred during validation.\" }\n    }\n  });\n\n  const validationResults = await Promise.all(validationPromises);\n  const errors: { rowIndex: number; message: string; field?: keyof Task }[] = [];\n\n  validationResults.forEach((result) => {\n    if (!result.isValid) {\n      errors.push({\n        rowIndex: result.index,\n        message: result.explanation,\n        field: result.field,\n      });\n    }\n  });\n\n  if (errors.length > 0) {\n    return { success: false, errors: errors.sort((a,b) => a.rowIndex - b.rowIndex) };\n  }\n\n  // If all validations pass, we would insert into Oracle database here\n  // For now, we'll just return success (you'll need to implement Oracle insertion later)\n  try {\n    // TODO: Implement Oracle database insertion here\n    console.log('Tasks validated successfully. Oracle insertion not yet implemented.');\n    console.log('Tasks to insert:', tasks);\n    \n    return { success: true };\n  } catch (error: any) {\n    console.error(\"Database insertion failed:\", error);\n    return {\n      success: false,\n      errors: [{ rowIndex: 0, message: `Database error: ${error.message}` }],\n    };\n  }\n}"],"names":[],"mappings":";;;;;AAGA;;;;;AAYA,yEAAyE;AACzE,MAAM,iBAAiB,CAAC;IACpB,MAAM,QAAQ,MAAM,GAAG,CAAC,CAAA,IAAK,EAAE,OAAO;IACtC,OAAO,MAAM,MAAM,CAAC,CAAC,MAAM,QAAU,MAAM,OAAO,CAAC,UAAU;AACjE;AAEO,eAAe,YAAY,KAAa;IAC7C,MAAM,iBAAiB,MAAM,GAAG,CAAC,CAAA,IAAK,EAAE,OAAO;IAC/C,MAAM,mBAAmB,eAAe;IAExC,MAAM,qBAAqB,MAAM,GAAG,CAAC,OAAO,MAAM;QAChD,4DAA4D;QAC5D,IAAI,iBAAiB,QAAQ,CAAC,KAAK,OAAO,GAAG;YAC3C,OAAO;gBACL;gBACA,SAAS;gBACT,aAAa,CAAC,yCAAyC,CAAC;gBACxD,OAAO;YACT;QACF;QAEA,MAAM,kBAAmC;YACvC,SAAS,KAAK,OAAO;YACrB,SAAS,KAAK,OAAO;YACrB,SAAS,KAAK,OAAO;YACrB,WAAW,KAAK,SAAS;YACzB,WAAW,KAAK,SAAS;YACzB,SAAS,KAAK,OAAO;YACrB,WAAW;QACb;QAEA,IAAI;YACF,MAAM,SAAS,MAAM,CAAA,GAAA,wJAAA,CAAA,yBAAsB,AAAD,EAAE;YAC5C,uGAAuG;YACvG,MAAM,iBAAiB,OAAO,MAAM,CAAC,MAAM,IAAI,CAAC,CAAA,IAAK,MAAM;YAC3D,IAAI,gBAAgB;gBAChB,OAAO;oBAAE;oBAAO,SAAS;oBAAO,aAAa;gBAA2B;YAC5E;YACA,OAAO;gBAAE;gBAAO,GAAG,MAAM;gBAAE,OAAO;YAAwB;QAC5D,EAAE,OAAM,GAAQ;YACd,QAAQ,KAAK,CAAC,wBAAwB;YACtC,OAAO;gBAAE;gBAAO,SAAS;gBAAO,aAAa,EAAE,OAAO,IAAI;YAAuC;QACnG;IACF;IAEA,MAAM,oBAAoB,MAAM,QAAQ,GAAG,CAAC;IAC5C,MAAM,SAAsE,EAAE;IAE9E,kBAAkB,OAAO,CAAC,CAAC;QACzB,IAAI,CAAC,OAAO,OAAO,EAAE;YACnB,OAAO,IAAI,CAAC;gBACV,UAAU,OAAO,KAAK;gBACtB,SAAS,OAAO,WAAW;gBAC3B,OAAO,OAAO,KAAK;YACrB;QACF;IACF;IAEA,IAAI,OAAO,MAAM,GAAG,GAAG;QACrB,OAAO;YAAE,SAAS;YAAO,QAAQ,OAAO,IAAI,CAAC,CAAC,GAAE,IAAM,EAAE,QAAQ,GAAG,EAAE,QAAQ;QAAE;IACjF;IAEA,qEAAqE;IACrE,uFAAuF;IACvF,IAAI;QACF,iDAAiD;QACjD,QAAQ,GAAG,CAAC;QACZ,QAAQ,GAAG,CAAC,oBAAoB;QAEhC,OAAO;YAAE,SAAS;QAAK;IACzB,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO;YACL,SAAS;YACT,QAAQ;gBAAC;oBAAE,UAAU;oBAAG,SAAS,CAAC,gBAAgB,EAAE,MAAM,OAAO,EAAE;gBAAC;aAAE;QACxE;IACF;AACF;;;IAvEsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 501, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/dashboard/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {submitTasks as '406b3b25286ef5cf4d6f245caa97c878283a37f3eb'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 559, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8R,GAC3T,4DACA","debugId":null}},
    {"offset": {"line": 573, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0Q,GACvS,wCACA","debugId":null}},
    {"offset": {"line": 587, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}